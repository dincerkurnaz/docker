yum install -y git
curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh
systemctl start docker

git clone https://github.com/dincerkurnaz/docker.git
cd docker/kubespray

docker build -t kubespray:0 .
docker run -v ~/.ssh/:/root/.ssh/ -v ~/.kubespray.yml:/root/.kubespray.yml -it --name kubespray_ks kubespray:0 bash

ssh-keygen
ssh-copy-id root@45.77.50.244
ssh-copy-id root@45.77.51.90 
ssh-copy-id root@45.77.51.156

#change these ip's for your own
export M1=45.77.50.244
export N1=45.77.51.90 
export N2=45.77.51.156

#Use only for Ubuntu 1604 hosts. Install Python and disable firewall
ssh root@$M1 "apt install -y python;ufw disable"
ssh root@$N1 "apt install -y python;ufw disable"
ssh root@$N2 "apt install -y python;ufw disable"

#for Centos7
ssh root@$M1 "systemctl disable firewalld;systemctl stop firewalld"
ssh root@$N1 "systemctl disable firewalld;systemctl stop firewalld"
ssh root@$N2 "systemctl disable firewalld;systemctl stop firewalld"

kubespray prepare --nodes node1[ansible_ssh_host=$N1] node2[ansible_ssh_host=$N2] --etcds master1[ansible_ssh_host=$M1] --masters master1[ansible_ssh_host=$M1]

#ubuntu 1604
kubespray deploy -u root -P

#centos7
kubespray deploy --redhat -u root -P -n flannel

#OR

#Ansible
git clone https://github.com/kubernetes-incubator/kubespray.git
cd kubespray
git checkout -b tags/v2.3.0

cat <<EOF > inventory/inventory.cfg
# Change ansible_ssh_host to your Public IP, ip to Private IP
master01 ansible_ssh_host=X.X.X.X ip=A.A.A.A
node01 ansible_ssh_host=Y.Y.Y.Y ip=B.B.B.B
node02 ansible_ssh_host=Z.Z.Z.Z ip=C.C.C.C
[kube-master]
master01
[etcd]
master01
[kube-node]
master01
node01
node02
[k8s-cluster:children]
kube-node
kube-master
EOF

vi ./inventory/group_vars/k8s-cluster.yml
# Enable access to kubernetes dashboard with basic auth
kube_basic_auth: true
# Use flannel for networking
-kube_network_plugin: calico
+kube_network_plugin: flannel

ansible-playbook --flush-cache -i /root/.kubespray/inventory/inventory.cfg reset.yml
ansible-playbook --flush-cache -i /root/.kubespray/inventory/inventory.cfg cluster.yml
ansible-playbook --flush-cache -i /root/.kubespray/inventory/inventory.cfg scale.yml

#Dashboard
ssh root@$M1
kubectl cluster-info

kubectl -n kube-system edit service kubernetes-dashboard
#type: ClusterIP to type: NodePort

kubectl -n kube-system get service kubernetes-dashboard

#Or
kubectl proxy --address 0.0.0.0 --accept-hosts '.*'
http://45.76.95.132:8001/ui


# Play
kubectl run my-nginx --image=nginx --replicas=2 --port=80
kubectl expose deployment my-nginx --port=80 --external-ip=45.32.153.144

#microservices
kubectl create namespace sock-shop

kubectl create -n sock-shop -f https://raw.githubusercontent.com/microservices-demo/microservices-demo/master/deploy/kubernetes/complete-demo.yaml

kubectl -n sock-shop get svc front-end
NAME        TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
front-end   NodePort   10.233.22.125   <none>        80:30001/TCP   4m

http://45.76.95.132:30001/

#SDS Rook.io
watch -t -n1 'kubectl get pods -n rook -o wide && echo && echo && kubectl get pods -o wide'
git clone https://github.com/rook/rook.git
cd rook/cluster/examples/kubernetes
kubectl create -f rook-operator.yaml
kubectl create -f rook-cluster.yaml

kubectl create -f rook-storageclass.yaml
kubectl patch storageclass rook-block -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

kubectl create -f mysql.yaml
kubectl create -f wordpress.yaml

/dev/rbd0       2.0G   32M  1.8G   2% /var/www/html
/dev/rbd0       2.0G  122M  1.7G   7% /var/lib/mysql
